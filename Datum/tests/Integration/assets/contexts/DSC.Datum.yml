# DSC
apiVersion: v0
kind: Datum.Collector\DatumCollectorMap
spec:
  AllNodes:
    apiVersion: v0
    kind: Datum.Collector\DatumFileSystemCollector
    spec:
      Path: ./AllNodes # Add virtual Node entity for * / All
      defaultType: Datum\Node
      RelativePathMapping: #./AllNodes/$Environment/$Name.yml going backward starting from the leaf (BaseName)
        - Name|NodeName # I want to map the BaseName of the file to both the .Name and .NodeName properties
        - Environment # this should only apply if relative path goes that far
      options:
        property_ref_path: # maybe allow a $node.location.GetReference()
          $this.location: /SiteData/$_
          $this.Environment: /Environments/$_
          $this.role: /roles/$_
        # Datum handler and kind transformation (needs walk through)
        # string to API transforms: [USER('username','pwd')] => {kind: Datum.Collector\ClearTextCredential, spec: {username: 'username', password: 'pwd'}}
        mergeHierarchy: # RSOP hierarchy
          - $this
          - /AllNodes/All
          - /Environments/$this.Environment
          - /SiteData/$this.Location
          - /Role/$this.Role
  SiteData:
    apiVersion: v0
    kind: Datum.Collector\DatumFileSystemCollector
    spec:
      Path: ./SiteData
      defaultType: Datum\Location
      RelativePathMapping:
        - Name
  Environments:
    apiVersion: v0
    kind: Datum.Collector\DatumFileSystemCollector
    spec:
      Path: ./Environments
      defaultType: Datum\Environment
      RelativePathMapping:
        - Name
  Roles:
    apiVersion: v0
    kind: Datum.Collector\DatumFileSystemCollector
    spec:
      Path: ./Roles
      defaultType: Datum\Role
      RelativePathMapping:
        - Name
  PackerTemplates:
    apiVersion: v0
    kind: Datum.Collector\DatumCollectorMap
    spec:
      Images:
        apiVersion: v0
        kind: Datum.Collector\DatumFileSystemCollector
        spec:
          Path: ./Packer/Images
          defaultType: Datum\PackerTemplate
          RelativePathMapping:
            - Name
            - os_family
          options:
            property_ref_path: # replace references with value
              $this.builder: /PackerTemplates/builder/$_
              $this.provisioner: /PackerTemplates/provisioner/$_
              $this.'post-processor': /PackerTemplates/post-processor/$_
            mergeHierarchy:
              - 

# two type of merge:
#   replace ref
#   merge through pivot key ('configurations')


ResolutionPrecedence:
  - Node($scope['Environment'],$scope['Name'])
  - Node('All')
  - Environment($scope['Environment'])
  - Location($scope['Location'])
  - Role($scope['Role'])

DatumHandlers:
  Datum::TestHandler: # Datum\Test-TestHandlerFilter & Invoke-TestHandlerAction
    CommandOptions:
      Password: P@ssw0rd
      Test: test

default_lookup_options: MostSpecific

lookup_options:
  Configurations:
    merge_baseType_array: unique

  dsc_configs:
    alias: Configurations
    merge_baseType_array: MostSpecific

  Applications:
    alias: App($scope['environment'],$scope['name'])
  # MergeTest1: deep
  # mergeTest1\MergeIntArray:
  #   merge_basetype_array: Sum

# Optional: Enable Policy compilation & on-the-fly update
Policies:
  - Name: NodePolicies
    #context: DSC # current context or default
    Scopes: Node('*','*') # each node is a $scope, the base for each Policy
    LookupKeys: 
      - Configurations # The key Configurations is the composition pivot
      #for a given $Scope, Lookup 'Configurations' -Scope $Scope => 'config1', 'config2', 'config3'

# if no contexts key, then load as default context

# Datum Context class, contexts collection
# 
# Datum entity class [extend Ordered Dict], Entities collection, static method to search by name
#
# Get-DatumEntity -Type Node|Role|Location|Environment -Context default|DSC|UCS -Name [wildcard string]
# New-DatumEntity -Type Node|Role|Location|Environment -Context default|DSC|UCS -Name [string]
# Set-DatumEntity -Type Node|Role|Location|Environment -Context default|DSC|UCS -Name [wildcard string] -Property [string] -Value [Object] 
# Remove-DatumEntity -Type Node|Role|Location|Environment -Context all|default|DSC|UCS -Name [wildcard String] -SkipUsageValidation

# How and when to use  nested contexts (query and merge a databag from two Trees )
# Make the RSOPs declarative (as per #35)


# Alias or redirect path to namespace: 'iso' -> ISO/
rules:
  # Rules set up here can't be enforced, they should be in separate repo
  # user/group provider should/could be extended with AD connection & Module to resolve membership?
  # group SysAdmin can't do x # use username from git and lookuo ad
  # change with impact y raises flag
  # 
contexts:
  default: DSC # if default is not set, use the first context (assuming the file format supports ordering)
  DSC:
    DefinitionFile: .\DSC.Datum.yml
  Packer:
    DefinitionFile: .\Packer.Datum.yml